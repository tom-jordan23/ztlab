input {
  beats {
    port => 5044
  }
  
  # Syslog input for network devices
  syslog {
    port => 5514
    type => "syslog"
  }
  
  # File input for log files
  file {
    path => "/var/log/sase/*.log"
    start_position => "beginning"
    type => "sase_logs"
  }
}

filter {
  # Parse SASE component logs
  if [type] == "sase_logs" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{DATA:component}\] %{GREEDYDATA:log_message}"
      }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Parse firewall logs
  if [type] == "firewall" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{IP:src_ip}:%{INT:src_port} -> %{IP:dst_ip}:%{INT:dst_port} %{WORD:action} %{GREEDYDATA:rule_info}"
      }
    }
    
    # GeoIP enrichment for source IPs
    geoip {
      source => "src_ip"
      target => "geoip_src"
    }
    
    geoip {
      source => "dst_ip"
      target => "geoip_dst"
    }
  }
  
  # Parse web proxy logs
  if [type] == "proxy" {
    grok {
      match => { 
        "message" => "%{IPORHOST:client_ip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATH:url} HTTP/%{NUMBER:http_version}\" %{INT:status_code} %{INT:bytes} \"%{DATA:referer}\" \"%{DATA:user_agent}\""
      }
    }
    
    # Categorize URLs
    if [url] =~ /\.(exe|msi|bat|cmd|scr|pif|jar)$/ {
      mutate {
        add_field => { "threat_category" => "suspicious_file" }
      }
    }
    
    if [url] =~ /(malware|phishing|virus)/ {
      mutate {
        add_field => { "threat_category" => "malicious_url" }
      }
    }
  }
  
  # Parse Zero Trust Access logs
  if [type] == "ztna" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:auth_result} user=%{WORD:username} app=%{WORD:application} src_ip=%{IP:src_ip} policy=%{WORD:policy}"
      }
    }
    
    # Flag failed authentication attempts
    if [auth_result] == "DENIED" or [auth_result] == "FAILED" {
      mutate {
        add_field => { "security_event" => "auth_failure" }
      }
    }
  }
  
  # Parse CASB logs
  if [type] == "casb" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:cloud_service} user=%{EMAILADDRESS:user_email} action=%{WORD:action} resource=%{DATA:resource} risk_score=%{INT:risk_score}"
      }
    }
    
    # Flag high-risk activities
    if [risk_score] {
      if [risk_score] >= 7 {
        mutate {
          add_field => { "risk_level" => "high" }
        }
      } else if [risk_score] >= 4 {
        mutate {
          add_field => { "risk_level" => "medium" }
        }
      } else {
        mutate {
          add_field => { "risk_level" => "low" }
        }
      }
    }
  }
  
  # Add common fields
  mutate {
    add_field => { "lab_environment" => "sase_demo" }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "sase-logs-%{+YYYY.MM.dd}"
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
  
  # Send security alerts to a separate index
  if [security_event] or [threat_category] or [risk_level] == "high" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "sase-security-alerts-%{+YYYY.MM.dd}"
    }
  }
}